#! /usr/bin/env python3

import json
import operator
import optparse
import random
import re
import subprocess
import systemd.journal
import time

parser = optparse.OptionParser()
parser.add_option('-a', '--apn', 
                  dest="apn", 
                  default=False,
                  )
parser.add_option('-i', '--ignore',
                  dest="ignore",
                  default=[],
                  action="append",
                  )
parser.add_option('-t', '--timeout',
                  dest="timeout",
                  default=900,
                  type="int",
                  )
options, remainder = parser.parse_args()

mm = subprocess.run(["mmcli", "--output-json", "--list-modems"], capture_output=True, check=True)
MODEMPATH = json.loads(mm.stdout)['modem-list'][0]

mm = subprocess.run(["mmcli", "--output-json", "--modem", MODEMPATH], capture_output=True, check=True)
MODEM = json.loads(mm.stdout)['modem']

mm = subprocess.run(["mmcli", "--output-json", "--sim", MODEM['generic']['sim']], capture_output=True, check=True)
SIM = json.loads(mm.stdout)['sim']

if options.apn:
    APN = options.apn
else:
    mm = subprocess.run(["mmcli", "--output-json", "--bearer", MODEM['3gpp']['eps']['initial-bearer']['dbus-path']], capture_output=True, check=True)
    APN = json.loads(mm.stdout)['bearer']['properties']['apn']

for p in MODEM['generic']['ports']:
    if p.endswith(" (at)"):
        TTYDEV = p[:-5]
    if p.endswith(" (net)"):
        NETDEV = p[:-6]

print("Testing begins at:  %s" % time.strftime("%Y-%m-%d %H:%M:%S"))
print("Home/SIM operator:  %s %s" % (SIM['properties']['operator-code'], SIM['properties']['operator-name']))
print("Access Point Name:  %s" % APN)
print("WWAN module model:  %s (firmware %s)" % (MODEM['generic']['model'], MODEM['generic']['revision']))
print("Network interface:  %s" % NETDEV)
print("AT command device:  %s" % TTYDEV)
print("Ignore RATs/PLMNs:  %s" % ", ".join(options.ignore))
print()

subprocess.run(["mmcli", "--set-logging=DEBUG"], capture_output=True, check=True)

jnl = systemd.journal.Reader()
jnl.add_match(_SYSTEMD_UNIT="ModemManager.service")
jnl.seek_tail()

def atcmd(command):
    with open("/dev/%s" % TTYDEV, mode="w") as tty:
        tty.write("%s\r" % command)
    prefix = "<debug> (%s): <-- '" % TTYDEV
    while jnl.wait():
        for entry in jnl:
            if entry['MESSAGE'].startswith(prefix):
                res = entry['MESSAGE'][len(prefix):-1]
                res = res.replace('<CR><LF>', "\n").strip()
                assert res.endswith('OK'), "Response '%s' did not end with 'OK'" % res
                return res
            

def set_tech(mode):
    if mode == "AUTO":
        return atcmd('AT^SYSCFGEX="00","3FFFFFFF",1,2,"7FFFFFFFFFFFFFFF",,')
    elif mode == "GSM":
        return atcmd('AT^SYSCFGEX="01","3FFFFFFF",1,2,"7FFFFFFFFFFFFFFF",,')
    elif mode == "UMTS":
        return atcmd('AT^SYSCFGEX="02","3FFFFFFF",1,2,"7FFFFFFFFFFFFFFF",,')
    elif mode == "LTE":
        return atcmd('AT^SYSCFGEX="03","3FFFFFFF",1,2,"7FFFFFFFFFFFFFFF",,')
    raise ValueError("Unknown mode '%s' (not AUTO/GSM/UMTS/LTE)" % mode)

def get_plmn():
    return atcmd('AT+COPS?')

def scan_plmns():
    print("Scanning PLMNs...", end='', flush=True)
    plmns = []
    for plmn in re.findall(r'\((\d),"([^"]+)","([^"]+)","(\d{5})",(\d)\)', atcmd('AT+COPS=?')):
        plmns.append({
            "status": plmn[0],
            "longname": plmn[1],
            "shortname": plmn[2],
            "mccmnc": plmn[3],
            "tech": plmn[4]
        })
    print("OK")
    return sorted(plmns, key=operator.itemgetter('mccmnc'))

def register(plmn):
    print("* Registering....", end='', flush=True)
    starttime = time.time()
    try:
        atcmd('AT+COPS=1,2,"%s"' % plmn['mccmnc'])
    except AssertionError:
        # Sometimes AT+COPS= fails (timeout?), but the modem keeps trying to
        # register anyway so we can just wait and see if the PLMN changes
        pass
    while atcmd('AT+COPS?').startswith('+COPS: 1,2,"%s",%s' % (plmn['mccmnc'], plmn['tech'])) == False:
        if time.time() >= starttime + options.timeout:
            print(f"FAILED [timeout after {options.timeout}s]")
            return False
        time.sleep(1)
    print("OK [%d seconds elapsed]" % int(time.time() - starttime))
    return True

def ping(target):
    res = subprocess.run(["ping", "-c10", "-I", NETDEV, target], capture_output=True)
    if res.returncode:
        print("FAILED [%s]" % res.stderr.decode('UTF-8').strip())
    else:
        print("OK")

def curl(ipveropt):
    res = subprocess.run(["curl", "-sS", ipveropt, "--interface", NETDEV, "http://icanhazip.com"], capture_output=True)
    if res.returncode:
        print("FAILED [%s]" % res.stderr.decode('UTF-8').strip())
    else:
        print("OK [%s]" % res.stdout.decode('UTF-8').strip())

def connect_and_test(ipv4=True, ipv6=True):
    if ipv4 and ipv6:
        pdptype="IPv4v6"
    elif ipv6:
        pdptype="IPv6"
    elif ipv4:
        pdptype="IP"

    CONNAME = "3gpptest-%s" % random.random()
    subprocess.run(["nmcli", "con", "add", "save", "no", "type", "gsm", "con-name", CONNAME,
                    "ifname", "*", "connection.autoconnect", "no", "gsm.apn", APN,
                    "ipv4.method", "auto" if ipv4 else "disabled",
                    "ipv6.method", "auto" if ipv6 else "disabled"], capture_output=True, check=True)

    print(f"*Â [{pdptype}] Connecting...", end='', flush=True)
    try:
        subprocess.run(["nmcli", "con", "up", CONNAME], capture_output=True, check=True)
    except subprocess.CalledProcessError:
        prefix = "<debug> Couldn't connect bearer: '"
        for entry in jnl:
            if entry['MESSAGE'].startswith(prefix):
                print("FAILED [%s]" % entry['MESSAGE'][len(prefix):-1])
        subprocess.run(["nmcli", "con", "del", CONNAME], capture_output=True, check=True)
        return
    print("OK")

    mm = subprocess.run(["mmcli", "--output-json", "--modem", MODEMPATH], capture_output=True, check=True)
    BEARERPATH = json.loads(mm.stdout)['modem']['generic']['bearers'][0]
    mm = subprocess.run(["mmcli", "--output-json", "--bearer", BEARERPATH], capture_output=True, check=True)
    BEARER = json.loads(mm.stdout)['bearer']

    if ipv4:
        print(f"  [{pdptype}] IPv4 config: %s" % BEARER['ipv4-config'])
        print(f"  [{pdptype}] ping 87.238.33.1...", end='', flush=True)
        ping("87.238.33.1")
        print(f"  [{pdptype}] curl -4 icanhazip.com...", end='', flush=True)
        curl('-4')
    if ipv6:
        print(f"  [{pdptype}] IPv6 config: %s" % BEARER['ipv6-config'])
        print(f"  [{pdptype}] ping 2a02:c0::1...", end='', flush=True)
        ping("2a02:c0::1")
        print(f"  [{pdptype}] curl -6 icanhazip.com...", end='', flush=True)
        curl('-6')

    print(f"  [{pdptype}] Disconnecting...", end='', flush=True)
    subprocess.run(["nmcli", "con", "down", CONNAME], capture_output=True, check=True)
    subprocess.run(["nmcli", "con", "del", CONNAME], capture_output=True, check=True)
    print("OK")


def test_plmn(plmn):
    print("%s" % plmn)
    print("=" * len(str(plmn)))
    if plmn['status'] == '3':
        print("* Skipped [forbidden PLMN]")
        return

    if (plmn['longname'] in options.ignore or
        plmn['shortname'] in options.ignore or
        plmn['mccmnc'] in options.ignore):
        print("* Skipped [ignored PLMN]")
        return
        
    if not register(plmn):
        return
    print("* Waiting for packet service...", end='', flush=True)
    starttime = time.time()
    while not atcmd('AT+CGATT?').startswith('+CGATT: 1'):
        if time.time() >= starttime + options.timeout:
            print(f"FAILED [timeout after {options.timeout}s]")
            return
        time.sleep(1)
    print("OK [%d seconds elapsed]" % int(time.time() - starttime))
    connect_and_test()
    connect_and_test(ipv4=False)
    connect_and_test(ipv6=False)
    

for tech in ['LTE', 'UMTS', 'GSM']:
    if tech in options.ignore:
        continue
    print(f"Setting radio access technolgy to {tech}...", end='', flush=True)
    set_tech(tech)
    print("OK")
    for plmn in scan_plmns():
        print("")
        test_plmn(plmn)
    print("")

set_tech('AUTO')
subprocess.run(["mmcli", "--set-logging=INFO"], capture_output=True, check=True)
print("Testing completed at:  %s" % time.strftime("%Y-%m-%d %H:%M:%S"))
